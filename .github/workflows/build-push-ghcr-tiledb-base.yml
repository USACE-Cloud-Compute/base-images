name: Build & Push Docker Images

on:
  push:
    branches: [main]
    paths:
      - .github/workflows/build-push-ghcr-tiledb-base.yml
      - "Dockerfile.*"
      - "versions/**"
  pull_request:
    paths:
      - .github/workflows/build-push-ghcr-tiledb-base.yml
      - "Dockerfile.*"
      - "versions/**"

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.make_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            workflow:
              - 'github/workflows/build-push-ghcr-tiledb-base.yml'
            base:
              - 'Dockerfile.tiledb-base'
              - 'versions/tiledb-base.txt'
            golang:
              - 'Dockerfile.tiledb-golang'
              - 'versions/tiledb-golang.txt'
            python:
              - 'Dockerfile.tiledb-python'
              - 'versions/tiledb-python.txt'

      - name: Compute build matrix
        id: make_matrix
        shell: bash
        run: |
          changed_workflow='${{ steps.filter.outputs.workflow }}'
          changed_base='${{ steps.filter.outputs.base }}'
          changed_go='${{ steps.filter.outputs.golang }}'
          changed_py='${{ steps.filter.outputs.python }}'

          images=()

          if [[ "$changed_base" == "true" || "$changed_workflow" == "true" ]]; then
            images+=(base golang python)
          else
            [[ "$changed_go" == "true" ]] && images+=(golang)
            [[ "$changed_py" == "true" ]] && images+=(python)
          fi

          # If nothing matched (e.g., weird path combo), bail out cleanly
          if [[ ${#images[@]} -eq 0 ]]; then
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Emit JSON array: ["base","golang",...]
          printf 'matrix=%s\n' "$(jq -nc --argjson a "$(printf '%s\n' "${images[@]}" | jq -R . | jq -s .)" '$a')" >> "$GITHUB_OUTPUT"

  build:
    needs: plan
    if: ${{ fromJSON(needs.plan.outputs.matrix).length > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: ${{ fromJSON(needs.plan.outputs.matrix) }}
        include:
          - name: base
            dockerfile: Dockerfile.tiledb-base
            version_file: versions/tiledb-base.txt
          - name: golang
            dockerfile: Dockerfile.tiledb-golang
            version_file: versions/tiledb-golang.txt
          - name: python
            dockerfile: Dockerfile.tiledb-python
            version_file: versions/tiledb-python.txt

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.name }}
          tags: |
            type=file,pattern={{version}},file=${{ matrix.version_file }},enable=true
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short,prefix=sha-

      - name: Build & (conditionally) push multi-arch image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
