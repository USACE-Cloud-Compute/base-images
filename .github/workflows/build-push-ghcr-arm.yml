name: Build & Push Docker Images

on:
  push:
    branches: [main]
    paths:
      - .github/workflows/build-push-ghcr-arm.yml
      - "Dockerfile.*"
      - "versions/**"
  pull_request:
    paths:
      - .github/workflows/build-push-ghcr-arm.yml
      - "Dockerfile.*"
      - "versions/**"

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  plan:
    runs-on: ubuntu-24.04-arm
    outputs:
      matrix: ${{ steps.make_matrix.outputs.matrix }}
      has_work: ${{ steps.make_matrix.outputs.has_work }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            workflow:
              - '.github/workflows/build-push-ghcr-arm.yml'
            base:
              - 'Dockerfile.tiledb-base'
              - 'versions/tiledb-base.txt'
            golang:
              - 'Dockerfile.tiledb-golang'
              - 'versions/tiledb-golang.txt'
            python:
              - 'Dockerfile.tiledb-python'
              - 'versions/tiledb-python.txt'

      - name: Compute build matrix
        id: make_matrix
        shell: bash
        run: |
          set -Eeuo pipefail

          echo "filter outputs:"
          echo "  workflow=${{ steps.filter.outputs.workflow }}"
          echo "  base=${{ steps.filter.outputs.base }}"
          echo "  golang=${{ steps.filter.outputs.golang }}"
          echo "  python=${{ steps.filter.outputs.python }}"

          changed_workflow='${{ steps.filter.outputs.workflow }}'
          changed_base='${{ steps.filter.outputs.base }}'
          changed_go='${{ steps.filter.outputs.golang }}'
          changed_py='${{ steps.filter.outputs.python }}'

          images=()

          if [[ "$changed_base" == "true" || "$changed_workflow" == "true" ]]; then
            images+=(cc-tiledb-base-arm cc-tiledb-golang-arm cc-tiledb-python-arm)
            echo "Reason: base/workflow changed â†’ rebuild all"
          else
            [[ "$changed_go" == "true" ]] && images+=(cc-tiledb-golang-arm)
            [[ "$changed_py" == "true" ]] && images+=(cc-tiledb-python-arm)
          fi

          if [[ ${#images[@]} -eq 0 ]]; then
            echo "matrix is empty"
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
            echo "has_work=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Build JSON array
          json='['
          for i in "${!images[@]}"; do
            [[ $i -gt 0 ]] && json+=','
            json+="\"${images[$i]}\""
          done
          json+=']'

          echo "Computed matrix: $json"
          echo "matrix=$json" >> "$GITHUB_OUTPUT"
          echo "has_work=true" >> "$GITHUB_OUTPUT"

  build:
    needs: plan
    if: ${{ needs.plan.outputs.has_work == 'true' }}
    runs-on: ubuntu-24.04-arm
    strategy:
      fail-fast: false
      matrix:
        name: ${{ fromJSON(needs.plan.outputs.matrix) }}
        include:
          - name: cc-tiledb-base-arm
            dockerfile: Dockerfile.tiledb-base
            version_file: versions/tiledb-base.txt
          - name: cc-tiledb-golang-arm
            dockerfile: Dockerfile.tiledb-golang
            version_file: versions/tiledb-golang.txt
          - name: cc-tiledb-python-arm
            dockerfile: Dockerfile.tiledb-python
            version_file: versions/tiledb-python.txt

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read and split version
        id: version
        run: |
          v=$(cat ${{ matrix.version_file }})
          echo "version=$v" >> "$GITHUB_OUTPUT"
          echo "minor=${v%.*}" >> "$GITHUB_OUTPUT"
          echo "major=${v%%.*}" >> "$GITHUB_OUTPUT"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.name }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=${{ steps.version.outputs.minor }}
            type=raw,value=${{ steps.version.outputs.major }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short,prefix=sha-

      - name: Build & (conditionally) push multi-arch image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
